<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[My Octopress Blog]]></title>
  <link href="http://jammydu.github.io/atom.xml" rel="self"/>
  <link href="http://jammydu.github.io/"/>
  <updated>2015-09-21T23:11:03+08:00</updated>
  <id>http://jammydu.github.io/</id>
  <author>
    <name><![CDATA[Your Name]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[继承中的构造方法]]></title>
    <link href="http://jammydu.github.io/blog/2015/09/21/construction-method/"/>
    <updated>2015-09-21T23:00:44+08:00</updated>
    <id>http://jammydu.github.io/blog/2015/09/21/construction-method</id>
    <content type="html"><![CDATA[<ol>
<li>子类的构造过程中必须调用其基类的构造方法</li>
<li>子类可以在自己的构造方法中使用super(argument_list)调用基类的构造方法{使用this(argument_list)调用本类的另外的构造方法；如果调用super 必须写在子类构造方法的第一行}</li>
<li>如果子类的构造方法中没有显示地调用基类构造方法，则系统默认调用基类无参数的构造方法</li>
<li>如果子类构造方法中既没有显示调用基类构造方法，而基类中有没有无参的构造方法，则编译出错</li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Package and Import]]></title>
    <link href="http://jammydu.github.io/blog/2015/09/11/package-and-import/"/>
    <updated>2015-09-11T00:00:00+08:00</updated>
    <id>http://jammydu.github.io/blog/2015/09/11/package-and-import</id>
    <content type="html"><![CDATA[<hr />

<p>layout: post
title: &ldquo;package 和 import语句&rdquo;
date: 2015-09-11 21:26:59 +0800
comments: true</p>

<h2>categories: </h2>

<p>1.package 提供类的多重命名空间。</br>
2.package语句作为java源文件的第一条语句，指明该文件中定义的类的所在的包（若缺少该语句则指定为无名包）。</br>
  格式为：package pkg/[.pkg]</br>
3.java编译器把包对应于文件系统的目录管理，package语句中，用‘.’来指明包（目录）的层次。</br>
例：package com.sxt;则该文件中所有的类位于.\com\sxt目录下。</br>
4.import 引入（写在最开始，就不用在引入的类中写包的全名了）
5.执行一个类需要写全包名
6.自己生成jar包：调出命令行,工作路径定义到自己要建的包的上一层 jar-cvf test.jar<em>.</em> 生成完成之后会在根目录下生成test.jar</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[随笔]]></title>
    <link href="http://jammydu.github.io/blog/2015/09/07/suishouji/"/>
    <updated>2015-09-07T19:46:01+08:00</updated>
    <id>http://jammydu.github.io/blog/2015/09/07/suishouji</id>
    <content type="html"><![CDATA[<h2>头一天</h2>

<p>今天是大二上课第一天，虽然是大二了但是感觉自己依旧像个大一新生一样，陌生的校园里陌生的宿舍、陌生的教室以及陌生的等等，去上个课花费在路上的时间快好45分钟里的二分之一了，一开始感觉就这样走着去上课也没啥，早点出发没事慢慢溜达呗，但是就在去图书馆借个书的路上我突然茅塞顿开，这尼玛明明是在浪费生命啊。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[杂的文]]></title>
    <link href="http://jammydu.github.io/blog/2015/09/04/miscellaneous-text/"/>
    <updated>2015-09-04T17:39:11+08:00</updated>
    <id>http://jammydu.github.io/blog/2015/09/04/miscellaneous-text</id>
    <content type="html"><![CDATA[<p>开学就是字变丑了，人变傻了，学的都忘了，智商变低了，感觉整个人都被恢复出厂化了，明天要粗发了，一切顺利！<img src="http://i.imgur.com/cGycw99.jpg" alt="" /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[对象的创建和使用]]></title>
    <link href="http://jammydu.github.io/blog/2015/09/02/object-creation-and-use/"/>
    <updated>2015-09-02T17:07:24+08:00</updated>
    <id>http://jammydu.github.io/blog/2015/09/02/object-creation-and-use</id>
    <content type="html"><![CDATA[<ol>
<li>必须使用new关键字创建对象；</li>
<li>使用对象引用.成员变量或来引用对象的成员变量；</li>
<li>使用对象引用.方法（参数列表）来调用对象的方法；</li>
<li>同一类的每个对象有不同的成员变量存储空间；</li>
<li>同一类的每个对象共享该类的方法；</li>
<li>非静态方法是针对每个对象调用。</li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Java 命名规则]]></title>
    <link href="http://jammydu.github.io/blog/2015/08/31/java-naming-rules/"/>
    <updated>2015-08-31T16:19:00+08:00</updated>
    <id>http://jammydu.github.io/blog/2015/08/31/java-naming-rules</id>
    <content type="html"><![CDATA[<h1>约定俗成命名规则</h1>

<ul>
<li>类名的首字母大写；</li>
<li>变量名和方法名的首字母小写；</li>
<li>运用驼峰标志（如果名字由好几个单词构成，除了首字母遵循类名、变量名、方法名的命名规则外，其它单词的首字母都要大写。</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[杂的文]]></title>
    <link href="http://jammydu.github.io/blog/2015/08/26/review/"/>
    <updated>2015-08-26T13:51:39+08:00</updated>
    <id>http://jammydu.github.io/blog/2015/08/26/review</id>
    <content type="html"><![CDATA[<h3>我是个程序员，我要掌握我计算机的一切，没错就应该是酱紫<img src="http://i.imgur.com/Sun1mIQ.jpg" alt="" /></h3>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Java开发环境搭建]]></title>
    <link href="http://jammydu.github.io/blog/2015/08/25/install-java-development-environment/"/>
    <updated>2015-08-25T23:14:51+08:00</updated>
    <id>http://jammydu.github.io/blog/2015/08/25/install-java-development-environment</id>
    <content type="html"><![CDATA[<h3>JDK安装配置</h3>

<ol>
<li>下载JDK
 <a href="http://www.oracle.com/technetwork/java/javase/downloads/index-jsp-138363.html" title="JDK下载地址">JDK下载地址</a></li>
<li>安装配置JDK
1、打开”开始->计算机->属性->高级系统设置->环境变量“</li>
</ol>


<p>2、设置环境变量（当前最新的是1.8.0_25)，如下：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>JAVA_HOME C:\Program Files\Java\jdk1.8.0_60
</span><span class='line'>
</span><span class='line'>CLASSPATH   .;%JAVA_HOME%\lib\dt.jar;%JAVA_HOME%\lib\tools.jar;
</span><span class='line'>
</span><span class='line'>PATH             %JAVA_HOME%\bin;%JAVA_HOME%\jre\bin;
</span></code></pre></td></tr></table></div></figure>


<p>3、验证是否配置成功
在cmd下运行<code>javac.exe</code>或<code>where javac</code>
4、在命令行下编译运行Java程序“hellow word”了解Java程序从编写到生成文件以及运行一个Java程序的过程
    1.创建一个java源代码文件<code>HelloWord.java</code>,文件内容如下</p>

<pre><code>```
public class HelloWord {
    /**
     * @param args
     */
    public static void main(String[] args) {
        // TODO Auto-generated method stub
        System.out.println();
        System.out.print("Hello Word!");
    }
}
```

2.调出命令行，切换目录到文件`HelloWord.java`所在目录
3.编译Java源代码文件：在命令行下执行命令`javac HelloWord.java`,编译成功后会生成一个编译后的文件`HelloWord.class`
4.运行Java编译生成的文件：在命令行下执行`java HelloWord`，执行成功后会打印“Hello Word!”
</code></pre>

<h3>FAQ</h3>

<ol>
<li>JDK和JRE是什么？</li>
<li>JDK与JRE区别？</li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Loop Statement]]></title>
    <link href="http://jammydu.github.io/blog/2015/07/29/loop-statement/"/>
    <updated>2015-07-29T09:17:44+08:00</updated>
    <id>http://jammydu.github.io/blog/2015/07/29/loop-statement</id>
    <content type="html"><![CDATA[<h1>循环语句</h1>


<p>1、switch语句：<br/>
case<br/>
default<br/>
break:中途退出<br/>
2、do&hellip;while语句：是一种先运行后判断的语句，也就是说，不管条件是否满足，至少先运行一次。<br/>
var box=1<br/>
while (box&lt;=5){<br/>
alert (box);<br/>
box++;<br>
}<br/>
3、for语句：先判断，后运行，但它具有在执行循环之前初始变量和定义循环后要执行代码的能力。<br/>
for(var box=1;box&lt;=5;box++){<br/>
alert (box);<br/>
}<br/>
4、for&hellip;in语句：是一种精准的迭代语句，可以用来枚举对象的属性。<br/>
var box={<br/>
&lsquo;name&rsquo;:&lsquo;杜娟&rsquo;<br/>
&lsquo;age&rsquo;:20<br/>
&lsquo;height&rsquo;:162<br/>
};<br/>
for(var p in box){<br/>
alert(p);<br/>
}<br/>
5、break和continue语句：用于在循环中精确地控制代码的执行，其中break语句会立即退出循环，强制执行循环体后面的语句。而break语句退出当前循环，继续后面的循环。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Informal Essay]]></title>
    <link href="http://jammydu.github.io/blog/2015/07/24/informal-essay/"/>
    <updated>2015-07-24T21:35:57+08:00</updated>
    <id>http://jammydu.github.io/blog/2015/07/24/informal-essay</id>
    <content type="html"><![CDATA[
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[HTML总结]]></title>
    <link href="http://jammydu.github.io/blog/2015/07/23/summary/"/>
    <updated>2015-07-23T22:22:48+08:00</updated>
    <id>http://jammydu.github.io/blog/2015/07/23/summary</id>
    <content type="html"><![CDATA[<h3>html</h3>


<p><br/></p>

<p><strong>1、标签</strong><code>&lt;a href="url"&gt;link test&lt;/a&gt;；</code><br/>
<strong>2、图像：定义图像</strong><code>&lt;img src="url"/&gt;;</code><br/></p>

<p><strong>3、表格：</strong>表头用<code>&lt;th&gt;</code>定义</br>
<code>&lt;table&gt;</code><br/>
         <code>&lt;tr&gt;</code>行<br/>
        <code>&lt;td&gt;&lt;/td&gt;</code>被分成的单元格<strong><strong><br/>
<code>&lt;/tr&gt;</code></br>
        <code>&lt;/table&gt;</code></br>
</strong>4、列表：</strong></br>
无序列表始于<code>&lt;ul&gt;</code>标签，每个列表项始于<code>&lt;li&gt;</code>;<br/>
有序列表项始于<code>&lt;ol&gt;</code>标签，每个列表项始于<code>&lt;li&gt;</code>;<br/>
自定义列表始于<code>&lt;dl&gt;</code>标签，每个列表项始于<code>&lt;dt&gt;</code>,列表项的定义以<code>&lt;dd&gt;</code>开始。<br/>
<strong>5、表单：</strong><code>&lt;form&gt;&lt;/form&gt;</code>
<br/>多数情况下被用到的表单标签是输入标签<code>&lt;input&gt;</code>；<br/>
输入类型是由类型属性<code>&lt;type&gt;</code>定义的。<br/>
<strong>6、单选按钮：(Radio Buttons)</strong><br/>
<code>&lt;form&gt;</code><br/>
<code>&lt;input type="radio" name="sex" value="正确"/&gt;正确</code><br/>
<code>&lt;/form&gt;</code><br/>
<strong>7、复选框：（Checkboxes）</strong><br/>
<strong>8、表单的动作属性和确认按钮：</strong><br/></p>

<p><code>&lt;form name="input" action="html_form_action.asp" method="get"&gt;</code><br/>
<code>用户：
&lt;input type="text" name="user"/&gt;</code><br/>
<code>&lt;input type="submit" value="确认"/&gt;</code> <br/>
<strong>9、定义下拉列表：</strong><br/>
<code>&lt;form&gt;&lt;br/&gt;
&lt;select&gt;&lt;br/&gt;
&lt;option value=""&gt; &lt;/option&gt;
&lt;/form&gt;</code><br/>
<strong>10、单选按钮：</strong><br/>
<code>&lt;form&gt;&lt;br/&gt;
&lt;input type="button" value="确认"&gt;&lt;br/&gt;
&lt;/form&gt;&lt;br/&gt;</code></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[问题]]></title>
    <link href="http://jammydu.github.io/blog/2015/07/23/summary/"/>
    <updated>2015-07-23T04:57:27+08:00</updated>
    <id>http://jammydu.github.io/blog/2015/07/23/summary</id>
    <content type="html"><![CDATA[<p>1、在markdown里用JS的注释语句为毛不灵；<br/>
2、在markdown里怎样可以不把html的语句转换成html格式。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[博客的使用]]></title>
    <link href="http://jammydu.github.io/blog/2015/07/21/the-use-of-blog/"/>
    <updated>2015-07-21T20:22:33+08:00</updated>
    <id>http://jammydu.github.io/blog/2015/07/21/the-use-of-blog</id>
    <content type="html"><![CDATA[<ul>
<li><p>在命令行下切换到博客目录</p>

<ol>
<li>windows+R调出命令行；</li>
<li>输入<code>E:</code>→回车；</li>
<li>输入<code>cd dev</code>→回车；</li>
<li>输入<code>cd octopress</code>→回车；</li>
</ol>
</li>
<li><p>创建一篇新博客</p>

<ol>
<li>输入<code>rake new_post["名字"]</code>→回车；</li>
<li>在目录<code>E:\dev\octopress\source\_posts</code>下找到新建的博客文件用MarkdownPad 2软件打开编辑内容和保存</li>
</ol>
</li>
<li><p>预览博客</p>

<ol>
<li>输入<code>rake preview</code>→回车；</li>
<li>用浏览器打开<a href="http://127.0.0.1:4000/">http://127.0.0.1:4000/</a></li>
</ol>
</li>
<li><p>发布博客</p>

<ol>
<li>输入<code>rake deploy</code>→回车,可以发布到远程服务器；</li>
</ol>
</li>
<li><p><em>特殊说明</em></p>

<ul>
<li>命令行会弹出文件的所在路径，然后去所在目录文件夹下打开博客的题目，就可以进行编辑了。</li>
</ul>
</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Hello Word]]></title>
    <link href="http://jammydu.github.io/blog/2015/07/21/hello-word/"/>
    <updated>2015-07-21T00:26:46+08:00</updated>
    <id>http://jammydu.github.io/blog/2015/07/21/hello-word</id>
    <content type="html"><![CDATA[<p>欢迎来到我的hellow—world</p>

<p>现在我已创建了自己的库，稀里糊涂搞了半天，最后仍然是稀里糊涂地的。然而现在我并不知道自己在干嘛其实。我会进一步慢慢完善它的。</p>
]]></content>
  </entry>
  
</feed>
